// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/indexer.proto

package indexer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Indexer service

type IndexerService interface {
	Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
}

type indexerService struct {
	c    client.Client
	name string
}

func NewIndexerService(name string, c client.Client) IndexerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "indexer"
	}
	return &indexerService{
		c:    c,
		name: name,
	}
}

func (c *indexerService) Index(ctx context.Context, in *IndexRequest, opts ...client.CallOption) (*IndexResponse, error) {
	req := c.c.NewRequest(c.name, "Indexer.Index", in)
	out := new(IndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "Indexer.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Indexer service

type IndexerHandler interface {
	Index(context.Context, *IndexRequest, *IndexResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
}

func RegisterIndexerHandler(s server.Server, hdlr IndexerHandler, opts ...server.HandlerOption) error {
	type indexer interface {
		Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
	}
	type Indexer struct {
		indexer
	}
	h := &indexerHandler{hdlr}
	return s.Handle(s.NewHandler(&Indexer{h}, opts...))
}

type indexerHandler struct {
	IndexerHandler
}

func (h *indexerHandler) Index(ctx context.Context, in *IndexRequest, out *IndexResponse) error {
	return h.IndexerHandler.Index(ctx, in, out)
}

func (h *indexerHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.IndexerHandler.Search(ctx, in, out)
}
